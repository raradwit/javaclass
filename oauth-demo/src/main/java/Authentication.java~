import io.vertx.core.AbstractVerticle;
import io.vertx.core.Vertx;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.auth.oauth2.AccessToken;
import io.vertx.ext.auth.oauth2.OAuth2Auth;
import io.vertx.ext.auth.oauth2.OAuth2FlowType;
import io.vertx.ext.web.Router;
import io.vertx.ext.web.RoutingContext;

import java.awt.*;
import java.net.URI;

/**
 * Created by anons on 5/3/16.
 */
public class Authentication extends AbstractVerticle {
    private final String CLIENT_ID="209383746114188";
    private final String CLIENT_SECRET="5ed66b8fda3fd339c76555f457cec4e7";    
    //private final String CLIENT_ID="562022547316526";
    //private final String CLIENT_SECRET="f604698ee9a5079d05a947c6963b5a3b";
    public static void main(String[] args) {
        Vertx vertx = Vertx.vertx();
        vertx.deployVerticle(new Authentication());
        //f604698ee9a5079d05a947c6963b5a3b
        //562022547316526
    }
    @Override
    public void start() throws Exception {
        Router router = Router.router(vertx);

        vertx.createHttpServer().requestHandler(router::accept).listen(8080);
        router.route("/auth").handler(this::oAuth);
//        router.route("/result").handler(this::oResult);


    }

    public void oAuth(RoutingContext routingContext){
            JsonObject credentials = new JsonObject()
                    .put("clientID", CLIENT_ID)
                    .put("clientSecret", CLIENT_SECRET)
                    .put("site", "https://www.facebook.com")
                    .put("authorizationPath", "/dialog/oauth")
                    .put("tokenPath", "https://graph.facebook.com/oauth/access_token");

            OAuth2Auth oauth2 = OAuth2Auth.create(vertx, OAuth2FlowType.CLIENT, credentials);

            String authorization_uri = oauth2.authorizeURL(new JsonObject()
                    .put("redirect_uri", "http://localhost:8080/callback")
                    .put("scope", "notifications")
                    .put("state", "3(#0/!~"));

            routingContext.response().putHeader("Location", authorization_uri)
                    .setStatusCode(302)
                    .end();


        String code="xxxxxxxxxxxxxxxx";

        oauth2.getToken(new JsonObject().put("code",code).put("redirec_uri","http://localhost:8080/callback"),res ->{
            System.out.println(code);
            if (res.failed()){
                System.err.println("Access Token Error: " + res.cause().getMessage());
            }
            else {
                AccessToken token = res.result();
                System.out.println(token);
            }
        });

//            JsonObject tokenConfig = new JsonObject()
//                    .put("code", "<code>")
//                    .put("redirect_uri", "http://localhost:3000/callback");
//
//            oauth2.getToken(tokenConfig, res -> {
//                if (res.failed()) {
//                    System.err.println("Access Token Error: " + res.cause().getMessage());
//                } else {
//                    // Get the access token object (the authorization code is given from the previous step).
//                    AccessToken token = res.result();
//
//                }
//            });

    }


}



